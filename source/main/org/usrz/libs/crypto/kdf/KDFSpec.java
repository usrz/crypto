/* ========================================================================== *
 * Copyright 2014 USRZ.com and Pier Paolo Fumagalli                           *
 * -------------------------------------------------------------------------- *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 *  http://www.apache.org/licenses/LICENSE-2.0                                *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * ========================================================================== */
package org.usrz.libs.crypto.kdf;

import org.usrz.libs.crypto.hash.Hash;
import org.usrz.libs.crypto.kdf.KDF.Function;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * A simple interface defining the operating specifications of a {@link KDF}.
 *
 * @author <a href="mailto:pier@usrz.com">Pier Fumagalli</a>
 */
@JsonDeserialize(builder=KDFSpecBuilder.class)
public interface KDFSpec {

    /**
     * Return the {@link Function} of the {@link KDF}.
     */
    public Function getFunction();

    /**
     * Return the {@link Hash} function used by the {@link KDF}.
     */
    public Hash getHash();

    /**
     * Return the length (in bytes) of keys generated by the {@link KDF}.
     */
    public int getDerivedKeyLength();

    /**
     * Compute the <em>hash code</em> for this {@link KDFSpec} instance.
     *
     * <p>All implementations of this interface <b>must</b> override this
     * and the {@link #equals(Object)} methods in order to support caching
     * and insertions in hash maps and similar structures.</p>
     */
    @Override
    public int hashCode();

    /**
     * Check if the specified object is <em>equal</em> to this instance.
     *
     * <p>All implementations of this interface <b>must</b> override this
     * and the {@link #hashCode()} methods in order to support caching
     * and insertions in hash maps and similar structures.</p>
     */
    @Override
    public boolean equals(Object object);

}
